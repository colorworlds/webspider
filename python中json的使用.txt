1. json序列化方法-转为json格式：
    dumps：无文件操作，参数为str   dump：序列化+写入文件，参数为文件

2. json反序列化方法-转为Python字典格式（里面还可以包含列表）：
	loads：无文件操作，参数为str   load：读文件+反序列化（参数为文件）

3. json模块可以序列化和反序列化的数据类型见python对象（obj）与json对象的对应关系表

4. 格式化写入文件利用  indent = 4 

	+-------------------+---------------+
    | Python            | JSON          |
    +===================+===============+
    | dict              | object        |
    +-------------------+---------------+
    | list, tuple       | array         |
    +-------------------+---------------+
    | str               | string        |
    +-------------------+---------------+
    | int, float        | number        |
    +-------------------+---------------+
    | True              | true          |
    +-------------------+---------------+
    | False             | false         |
    +-------------------+---------------+
    | None              | null          |
    +-------------------+---------------+

# 如果要将中文写入文件中，则需要指定ensure_ascii=False
with open('test.json','a',encoding='utf-8') as f:
    json.dump('熊珍龙', f,ensure_ascii=False)  # 写入，序列化


# 如果要将json文件中的中文输出，则必须通过下面的方式获取
# with open('test.json',encoding='utf-8') as f:
#     text = json.load(f)
#     print(text)
